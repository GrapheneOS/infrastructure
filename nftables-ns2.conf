#!/usr/bin/nft -f

flush ruleset

table inet filter {
    define ip-allowlist-ssh = {
        127.0.0.1,
        198.98.53.141, # 0.ns2.grapheneos.org
    }

    define ip6-allowlist-ssh = {
        ::1,
        2605:6400:10:102e:95bc:89ef:2e7f:49bb, # 0.ns2.grapheneos.org
    }

    set ip-connlimit-ssh {
        type ipv4_addr
        flags dynamic
    }

    set ip6-connlimit-ssh {
        type ipv6_addr
        flags dynamic
    }

    set ip-connlimit-main {
        type ipv4_addr
        flags dynamic
    }

    set ip6-connlimit-main {
        type ipv6_addr
        flags dynamic
    }

    chain prerouting-raw {
        type filter hook prerouting priority raw

        # drop packets without a reverse path (strict reverse path filtering)
        fib saddr . iif oif missing counter drop

        iif lo notrack accept

        # drop packets to address not configured on incoming interface (strong host model)
        #
        # ordered after accepting loopback to permit using external IPs via loopback
        fib daddr . iif type != { local, broadcast, multicast } counter drop

        # reject SSH packets via anycast IP
        tcp dport 22 ip daddr 198.251.90.93 reject with tcp reset

        udp dport 53 notrack accept

        # handle new TCP connections beyond rate limit via synproxy to avoid conntrack table exhaustion
        tcp dport { 22, 53, 80, 443, 853 } tcp flags syn limit rate 1024/second burst 128 packets accept
        tcp dport { 22, 53, 80, 443, 853 } tcp flags syn counter notrack accept

        meta l4proto { icmp, ipv6-icmp } notrack accept
    }

    chain input {
        type filter hook input priority filter
        policy drop

        tcp dport { 22, 53, 80, 443, 853 } goto input-tcp-service
        iif lo accept
        udp dport 53 accept
        meta l4proto { icmp, ipv6-icmp } accept
        ct state vmap { new : goto graceful-reject, established : accept, related : accept }
    }

    chain input-tcp-service {
        iif lo goto input-tcp-service-loopback

        # for synproxy, SYN is untracked and first ACK is invalid which are handled via fallthrough
        ct state vmap { new : goto input-tcp-service-new, established : goto input-tcp-service-established, related : accept }

        tcp dport 22 ip saddr @ip-connlimit-ssh counter reject with tcp reset
        tcp dport 22 ip6 saddr and ffff:ffff:ffff:ffff:ffff:: @ip6-connlimit-ssh counter reject with tcp reset
        tcp dport { 53, 80, 443, 853 } ip saddr @ip-connlimit-main counter reject with tcp reset
        tcp dport { 53, 80, 443, 853 } ip6 saddr and ffff:ffff:ffff:ffff:: @ip6-connlimit-main counter reject with tcp reset
        synproxy mss 1460 wscale 7 timestamp sack-perm
    }

    chain input-tcp-service-new {
        tcp dport 22 ip saddr @ip-connlimit-ssh counter reject with tcp reset
        tcp dport 22 ip6 saddr and ffff:ffff:ffff:ffff:ffff:: @ip6-connlimit-ssh counter reject with tcp reset
        tcp dport { 53, 80, 443, 853 } ip saddr @ip-connlimit-main counter reject with tcp reset
        tcp dport { 53, 80, 443, 853 } ip6 saddr and ffff:ffff:ffff:ffff:: @ip6-connlimit-main counter reject with tcp reset
        accept
    }

    # add connections established without synproxy to connection limit sets with limits enforced
    chain input-tcp-service-established {
        ct mark 0x1 accept
        tcp dport 22 ip saddr != $ip-allowlist-ssh add @ip-connlimit-ssh { ip saddr ct count over 1 } counter reject with tcp reset
        tcp dport 22 ip6 saddr != $ip6-allowlist-ssh add @ip6-connlimit-ssh { ip6 saddr and ffff:ffff:ffff:ffff:ffff:: ct count over 1 } counter reject with tcp reset
        tcp dport { 53, 80, 443, 853 } add @ip-connlimit-main { ip saddr ct count over 16 } counter reject with tcp reset
        tcp dport { 53, 80, 443, 853 } add @ip6-connlimit-main { ip6 saddr and ffff:ffff:ffff:ffff:: ct count over 16 } counter reject with tcp reset
        ct mark set 0x1 accept
    }

    # add connections established with synproxy to connection limit sets with limits enforced
    chain input-tcp-service-loopback {
        tcp flags != syn accept
        tcp dport 22 ip saddr != $ip-allowlist-ssh add @ip-connlimit-ssh { ip saddr ct count over 1 } counter reject with tcp reset
        tcp dport 22 ip6 saddr != $ip6-allowlist-ssh add @ip6-connlimit-ssh { ip6 saddr and ffff:ffff:ffff:ffff:ffff:: ct count over 1 } counter reject with tcp reset
        tcp dport { 53, 80, 443, 853 } add @ip-connlimit-main { ip saddr ct count over 16 } counter reject with tcp reset
        tcp dport { 53, 80, 443, 853 } add @ip6-connlimit-main { ip6 saddr and ffff:ffff:ffff:ffff:: ct count over 16 } counter reject with tcp reset
        ct mark set 0x1 accept
    }

    chain forward {
        type filter hook forward priority filter
        policy drop
    }

    chain output-raw {
        type filter hook output priority raw

        oif lo notrack accept
        udp sport 53 notrack accept
        meta l4proto { icmp, ipv6-icmp } notrack accept
    }

    chain output {
        type filter hook output priority filter

        oif lo goto output-loopback
        skuid != { root, systemd-network, unbound, chrony, http, powerdns, geoipupdate } counter goto graceful-reject
    }

    chain output-loopback {
        skuid unbound meta l4proto { tcp, udp } th sport 53 th dport >= 1024 accept
        skuid { chrony, geoipupdate } meta l4proto { tcp, udp } th sport >= 1024 th dport 53 accept

        skuid powerdns meta l4proto tcp th sport 54 th dport >= 1024 accept
        skuid http meta l4proto tcp th sport >= 1024 th dport 54 accept

        skuid powerdns meta l4proto tcp th sport 81 th dport >= 1024 accept

        skuid != root counter goto graceful-reject
        accept
    }

    chain graceful-reject {
        meta l4proto udp reject
        meta l4proto tcp reject with tcp reset
        reject
    }
}
